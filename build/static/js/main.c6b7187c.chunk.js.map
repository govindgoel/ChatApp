{"version":3,"sources":["Chat.js","App.js","serviceWorker.js","index.js"],"names":["Chat","props","state","username","message","messages","socket","io","on","data","addMessage","console","log","setState","sendMessage","ev","preventDefault","emit","author","className","this","map","type","placeholder","value","onChange","target","onClick","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"wRAoEeA,E,kDAhEX,WAAYC,GAAO,IAAD,uBACd,cAAMA,IAEDC,MAAQ,CACTC,SAAU,GACVC,QAAS,GACTC,SAAU,IAGd,EAAKC,OAASC,IAAG,kBAEjB,EAAKD,OAAOE,GAAG,mBAAmB,SAASC,GACvCC,EAAWD,MAGf,IAAMC,EAAa,SAAAD,GACfE,QAAQC,IAAIH,GACZ,EAAKI,SAAS,CAACR,SAAS,GAAD,mBAAM,EAAKH,MAAMG,UAAjB,CAA2BI,MAClDE,QAAQC,IAAI,EAAKV,MAAMG,WAlBb,OAqBd,EAAKS,YAAc,SAAAC,GACfA,EAAGC,iBACH,EAAKV,OAAOW,KAAK,eAAgB,CAC7BC,OAAQ,EAAKhB,MAAMC,SACnBC,QAAS,EAAKF,MAAME,UAExB,EAAKS,SAAS,CAACT,QAAS,MA3Bd,E,qDA+BT,IAAD,OACJ,OACI,yBAAKe,UAAU,aACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,SACX,yBAAKA,UAAU,QACX,yBAAKA,UAAU,aACX,yBAAKA,UAAU,cAAf,eACA,6BACA,yBAAKA,UAAU,YACVC,KAAKlB,MAAMG,SAASgB,KAAI,SAAAjB,GACrB,OACI,6BAAMA,EAAQc,OAAd,KAAwBd,EAAQA,cAMhD,yBAAKe,UAAU,eACX,2BAAOG,KAAK,OAAOC,YAAY,WAAWC,MAAOJ,KAAKlB,MAAMC,SAAUsB,SAAU,SAAAV,GAAE,OAAI,EAAKF,SAAS,CAACV,SAAUY,EAAGW,OAAOF,SAASL,UAAU,iBAC5I,6BACA,2BAAOG,KAAK,OAAOC,YAAY,UAAUJ,UAAU,eAAeK,MAAOJ,KAAKlB,MAAME,QAASqB,SAAU,SAAAV,GAAE,OAAI,EAAKF,SAAS,CAACT,QAASW,EAAGW,OAAOF,WAC/I,6BACA,4BAAQG,QAASP,KAAKN,YAAaK,UAAU,gCAA7C,iB,GAvDbS,IAAMC,WCUVC,E,uKARX,OACE,6BACI,kBAAC,EAAD,W,GAJQD,aCSEE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrC,QAAQqC,MAAMA,EAAM5C,c","file":"static/js/main.c6b7187c.chunk.js","sourcesContent":["import React from \"react\";\nimport io from \"socket.io-client\";\n\nclass Chat extends React.Component{\n    constructor(props){\n        super(props);\n\n        this.state = {\n            username: '',\n            message: '',\n            messages: []\n        };\n\n        this.socket = io('localhost:8080');\n\n        this.socket.on('RECEIVE_MESSAGE', function(data){\n            addMessage(data);\n        });\n\n        const addMessage = data => {\n            console.log(data);\n            this.setState({messages: [...this.state.messages, data]});\n            console.log(this.state.messages);\n        };\n\n        this.sendMessage = ev => {\n            ev.preventDefault();\n            this.socket.emit('SEND_MESSAGE', {\n                author: this.state.username,\n                message: this.state.message\n            })\n            this.setState({message: ''});\n\n        }\n    }\n    render(){\n        return (\n            <div className=\"container\">\n                <div className=\"row\">\n                    <div className=\"col-4\">\n                        <div className=\"card\">\n                            <div className=\"card-body\">\n                                <div className=\"card-title\">Global Chat</div>\n                                <hr/>\n                                <div className=\"messages\">\n                                    {this.state.messages.map(message => {\n                                        return (\n                                            <div>{message.author}: {message.message}</div>\n                                        )\n                                    })}\n                                </div>\n\n                            </div>\n                            <div className=\"card-footer\">\n                                <input type=\"text\" placeholder=\"Username\" value={this.state.username} onChange={ev => this.setState({username: ev.target.value})} className=\"form-control\"/>\n                                <br/>\n                                <input type=\"text\" placeholder=\"Message\" className=\"form-control\" value={this.state.message} onChange={ev => this.setState({message: ev.target.value})}/>\n                                <br/>\n                                <button onClick={this.sendMessage} className=\"btn btn-primary form-control\">Send</button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Chat;","import React, { Component } from 'react';\nimport Chat from \"./Chat\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n          <Chat/>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}